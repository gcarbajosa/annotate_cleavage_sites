boxplot(testtito$pLI ~ testtito$n_lof)
boxplot(testtito$n_lof ~ testtito$pLI)
smoothScatter(testtito$n_lof , testtito$pLI)
smoothScatter(testtito$n_lof , testtito$pLI , xlim = c(0,50))
plot(testtito$n_lof , testtito$pLI , xlim = c(0,50))
plot(testtito$n_lof , testtito$pLI , xlim = c(0,20))
plot(jitter(testtito$n_lof) , jitter(testtito$pLI) , xlim = c(0,20))
testtito <- readxl::read_xlsx(path = "Projects/GeneticCompensation/ExAC/nature19057-s2/nature19057-SI Table 13.xlsx",sheet =3)
boxplot(testtito$n_lof ~ testtito$clinvar_path)
boxplot(testtito$n_lof ~ testtito$clinvar_path, ylim=c(0,15))
boxplot(testtito$n_lof ~ testtito$clinvar_path, ylim=c(0,10))
boxplot(testtito$n_lof ~ testtito$clinvar_path, ylim=c(0,5))
boxplot(testtito$n_lof ~ testtito$clinvar_path_omim, ylim=c(0,5))
boxplot(testtito$n_lof ~ testtito$clinvar_path_omim, ylim=c(0,10))
chisq.test(testtito$n_lof , testtito$clinvar_path_omim)
chisq.test(testtito$n_lof , testtito$clinvar_path)
fisher.test(testtito$n_lof , testtito$clinvar_path)
t.test(testtito$n_lof , testtito$clinvar_path_omim)
t.test(testtito[testtito$clinvar_path == 0,]$n_lof , testtito[testtito$clinvar_path ==1,]$clinvar_path_omim)
t.test(testtito[testtito$clinvar_path_omim == 0,]$n_lof , testtito[testtito$clinvar_path_omim ==1,]$clinvar_path_omim)
wilcox.test(testtito[testtito$clinvar_path_omim == 0,]$n_lof , testtito[testtito$clinvar_path_omim ==1,]$clinvar_path_omim)
library("mediation")
tdata <- as.data.frame(cbind(c(1,1,1,1,1,2,2,2,2,2), my.matrx))
my.matrx <- matrix(c(1:10, 11:20, 21:30), nrow = 10, ncol = 3)
tdata <- as.data.frame(cbind(c(1,1,1,1,1,2,2,2,2,2), my.matrx))
my.matrx
tdata
colnames(tdata)
tapply(tdata$V2, tdata$V1, mean)
mean(c(6,7,8,9,10))
tapply(tdata$V3, tdata$V1, mean)
tapply(tdata$V4, tdata$V1, mean)
summary <- tapply(tdata$V2, tdata$V1, function(x) c(mean(x), sd(x)))
summary
summary <- tapply(tdata$V3, tdata$V1, function(x) c(mean(x), sd(x)))
summary
tdata$V5 <- mapply(function(x, y) x/y, tdata$V2, tdata$V4)
tdata
10/30
1/21
iris
dplyr::summarise(iris, avg = mean(Sepal.Length))
mean(iris$Sepal.Length)
dplyr::summarise_each(iris, funs(mean))
dplyr::summarise_all(iris, funs(mean))
dplyr::summarise_all(iris, fun(mean))
dplyr::summarise_all(iris, mean)
summary(iris, mean)
summary(iris)
apply(iris, 1:2, mean)
apply(iris, 2, mean)
sapply(iris, 2, mean)
sapply(iris, 2, mean)
sapply(iris, 1, mean)
mapply(mean, iris)
mapply(sd, iris)
mapply(sd, iris)
mapply(count, iris)
mapply(count.fields, iris)
mapply(min, iris)
mapply(min(), iris)
mapply(max, iris)
mapply(mean, iris)
dplyr::arrange(iris)
dplyr::arrange(iris, Petal.Length  )
dplyr::summarise_all(iris, mean)
dplyr::summarise_at(iris, Species , tally)
dplyr::summarise_at(iris, Species , uniq)
dplyr::summarise_at(iris, Species , unique())
dplyr::summarise_at(iris, Species , unique
)
iris %>%
group_by(Species) %>%
summarise_all(mean)
library(dplyr)
iris %>%
group_by(Species) %>%
summarise_all(mean)
iris %>%
group_by(Species)
iris %>%
group_by(Species) %>%
summarise_all(mean)
starwars
starwars %>% summarise_at(c("height", "mass"), mean, na.rm = TRUE)
starwars %>% summarise_if(is.numeric, mean, na.rm = TRUE)
by_species <- iris %>% group_by(Species)
by_species
by_species %>% summarise_all(funs(min, max))
x <- rnorm(10)
y <- rnorm(10)
z <- rnorm(10)
lmtst<- lm(x~ y+z)
summary(lmtst)
pf(lmtst$fstatistic[1L], lmtst$fstatistic[2L], lmtst$fstatistic[3L], lower.tail = FALSE)
lmtst.sum<- summary(lmtst)
pf(lmtst.sum$fstatistic[1L], lmtst.sum$fstatistic[2L], lmtst.sum$fstatistic[3L], lower.tail = FALSE)
lmtst.sum$fstatistic
lmtst$coefficients
lmtst$residuals
lmtst.sum$coefficients
lmtst.sum$fstatistic
lmtst.sum$coefficients
lmtst$coefficients
lmtst$effects
lmtst$call
lmtst$terms
lmtst$rank
lmtst$fitted.values
lmtst$coefficients
lmtst.sum
lmtst$coefficients
lmtst.sum$coefficients
lmtst.sum$coefficients[1]
lmtst.sum$coefficients[2]
lmtst.sum$coefficients[2,4]
lmtst.sum$coefficients["y",]
lmtst.sum$coefficients["y","Pr(>|t|)"]
library(mediation)
?framing
framing
View(framing)
plot(framing$treat, framing$emo)
framing[,c("treat","emo")]
boxplot(framing$treat, framing$emo)
boxplot(framing$emo ~ framing$treat)
library(MatrixEQTL, lib.loc = "/usr/lib64/R/library")
library(synapser, lib.loc = "/usr/lib64/R/library")
synLogin(email=NULL, password=NULL, apiKey=NULL, sessionToken=NULL, rememberMe=FALSE, silent=FALSE, forced=FALSE)
synLogin(email=guillermo.carbajosa_antona@kcl.ac.uk, password=MC5.spex, apiKey=NULL, sessionToken=NULL, rememberMe=TRUE, silent=FALSE, forced=FALSE)
synLogin(email="k1506263@kcl.ac.uk", password="MC5.spex", apiKey=NULL, sessionToken=NULL, rememberMe=TRUE, silent=FALSE, forced=FALSE)
synLogin(email="gcarbajosa", password="MC5.spex", apiKey=NULL, sessionToken=NULL, rememberMe=TRUE, silent=FALSE, forced=FALSE)
?synapser
?synLogin
synLogin(email="gcarbajosa", password="MC5.spex", apiKey=NULL, sessionToken=NULL, rememberMe=TRUE, silent=FALSE, forced=FALSE)
synGetUserProfile
synGetUserProfile()
synGetUserProfile()
synLogout
synLogout()
synLogout()
synLogin()
synLogout()
synLogin()
synLogout()
source('~/Projects/GeneticCompensation/prepareDESEq2In.R', echo=TRUE)
DESeq2Table <- DESeq(DESeq2Table)
resultsNames(DESeq2Table)
res_Group_het_vs_ctrl <- results(DESeq2Table, name="Group_het_vs_ctrl")
res_Group_hom_vs_ctrl <- results(DESeq2Table, name="Group_hom_vs_ctrl")
res_Group_het_vs_ctrl
head(order(res_Group_het_vs_ctrl$padj))
head(res_Group_het_vs_ctrl[order(res_Group_het_vs_ctrl$padj),])
res_Group_het_vs_ctrl[order(res_Group_het_vs_ctrl$padj),]
print(res_Group_het_vs_ctrl[order(res_Group_het_vs_ctrl$padj),], n=20)
print(x=res_Group_het_vs_ctrl[order(res_Group_het_vs_ctrl$padj),])
print(x=res_Group_het_vs_ctrl[order(res_Group_het_vs_ctrl$padj),], max = 20)
res_Group_het_vs_ctrl[order(res_Group_het_vs_ctrl$padj),]
res_Group_het_vs_ctrl
# or to shrink log fold changes association with condition:
res_Group_het_vs_ctrl_shrink <- lfcShrink(dds, coef="Group_het_vs_ctrl", type="apeglm")
# or to shrink log fold changes association with condition:
res_Group_het_vs_ctrl_shrink <- lfcShrink(DESeq2Table, coef="Group_het_vs_ctrl", type="apeglm")
# or to shrink log fold changes association with condition:
res_Group_het_vs_ctrl_shrink <- lfcShrink(DESeq2Table, coef="Group_het_vs_ctrl", type="apeglm")
res_Group_het_vs_ctrl
res_Group_het_vs_ctrl_shrink
res_Group_het_vs_ctrl[order(res_Group_het_vs_ctrl$padj),]
res_Group_het_vs_ctrl_shrink[order(res_Group_het_vs_ctrl_shrink$padj),]
# Check top differences
top_res_Group_het_vs_ctrl_<- head(res_Group_het_vs_ctrl[order(res_Group_het_vs_ctrl$padj),])
# Check top differences
top_res_Group_hom_vs_ctrl_<- head(res_Group_hom_vs_ctrl[order(res_Group_hom_vs_ctrl$padj),])
# Read gene to gene_name table
gene2geneName <- read.table("/home/gcarbajosa/annotation/hsapiens/hg37/gtf/gencode.v19.annotation.ens2geneNameTable.txt")
head(gene2geneName)
colnames(gene2geneName) <- c("EnsId", "geneName")
head(gene2geneName)
ls(pattern = "top_")
rm(list = ls(pattern = "top_"))
# Check top differences
top_res_Group_het_vs_ctrl<- head(res_Group_het_vs_ctrl[order(res_Group_het_vs_ctrl$padj),])
top_res_Group_het_vs_ctrl_geneNames <- gene2geneName[rownames(top_res_Group_het_vs_ctrl)%in% gene2geneName$EnsId,]
top_res_Group_het_vs_ctrl_geneNames
gene2geneName[rownames(top_res_Group_het_vs_ctrl)%in% gene2geneName$EnsId,]
rownames(top_res_Group_het_vs_ctrl)
top_res_Group_het_vs_ctrl_geneNames <- rownames(top_res_Group_het_vs_ctrl)
top_res_Group_het_vs_ctrl_geneNames
gsub(pattern = "\\.\\d+$", top_res_Group_het_vs_ctrl_geneNames, perl = T)
gsub(pattern = "\\.\\d+$", x=top_res_Group_het_vs_ctrl_geneNames, perl = T)
gsub(pattern = "\\.\\d+$", x=top_res_Group_het_vs_ctrl_geneNames, replacement = "",perl = T)
top_res_Group_het_vs_ctrl_ensIDs<- gsub(pattern = "\\.\\d+$", x=top_res_Group_het_vs_ctrl_ensIDs, replacement = "",perl = T)
# Check top differences
top_res_Group_het_vs_ctrl<- head(res_Group_het_vs_ctrl[order(res_Group_het_vs_ctrl$padj),])
top_res_Group_het_vs_ctrl_ensIDs <- rownames(top_res_Group_het_vs_ctrl)
top_res_Group_het_vs_ctrl_ensIDs <- rownames(top_res_Group_het_vs_ctrl)
top_res_Group_het_vs_ctrl_ensIDs<- gsub(pattern = "\\.\\d+$", x=top_res_Group_het_vs_ctrl_ensIDs, replacement = "",perl = T)
top_res_Group_het_vs_ctrl_ensIDs
top_res_Group_het_vs_ctrl_geneNames <- gene2geneName[rownames(top_res_Group_het_vs_ctrl)%in% gene2geneName$EnsId,]
top_res_Group_het_vs_ctrl_geneNames
top_res_Group_het_vs_ctrl_geneNames <- gene2geneName[rownames(top_res_Group_het_vs_ctrl_ensIDs)%in% gene2geneName$EnsId,]
top_res_Group_het_vs_ctrl_geneNames
rownames(top_res_Group_het_vs_ctrl_ensIDs)%in% gene2geneName$EnsId
rownames(top_res_Group_het_vs_ctrl_ensIDs)
top_res_Group_het_vs_ctrl_ensIDs
top_res_Group_het_vs_ctrl_ensIDs %in% gene2geneName$EnsId
gene2geneName[top_res_Group_het_vs_ctrl_ensIDs,]
gene2geneName[gene2geneName$EnsId ==top_res_Group_het_vs_ctrl_ensIDs,]
gene2geneName[gene2geneName$EnsId == top_res_Group_het_vs_ctrl_ensIDs,]
top_res_Group_het_vs_ctrl_ensIDs
head(gene2geneName)
gene2geneName[gene2geneName$EnsId == "ENSG00000237973",]
gene2geneName[gene2geneName$EnsId == "ENSG00000101470",]
gene2geneName[gene2geneName$EnsId == top_res_Group_het_vs_ctrl_ensIDs,]
gene2geneName[gene2geneName$EnsId %in% top_res_Group_het_vs_ctrl_ensIDs,]
top_res_Group_het_vs_ctrl_geneNames <- gene2geneName[gene2geneName$EnsId %in% top_res_Group_het_vs_ctrl_ensIDs,"geneName"]
top_res_Group_het_vs_ctrl_geneNames
# Check top differences
#top_res_Group_het_vs_ctrl<- head(res_Group_het_vs_ctrl[order(res_Group_het_vs_ctrl$padj),])
top_res_Group_het_vs_ctrl<- res_Group_het_vs_ctrl[res_Group_het_vs_ctrl$padj < 0.05,]
res_Group_het_vs_ctrl$padj < 0.05
table(res_Group_het_vs_ctrl$padj < 0.05)
# Check top differences
#top_res_Group_het_vs_ctrl<- head(res_Group_het_vs_ctrl[order(res_Group_het_vs_ctrl$padj),])
top_res_Group_het_vs_ctrl<- res_Group_het_vs_ctrl[!is.na(res_Group_het_vs_ctrl$padj < 0.05),]
head(top_res_Group_het_vs_ctrl)
# Check top differences
#top_res_Group_het_vs_ctrl<- head(res_Group_het_vs_ctrl[order(res_Group_het_vs_ctrl$padj),])
top_res_Group_het_vs_ctrl<- res_Group_het_vs_ctrl[!is.na(res_Group_het_vs_ctrl$padj < 0.05) & res_Group_het_vs_ctrl$padj < 0.05,]
head(top_res_Group_het_vs_ctrl)
top_res_Group_het_vs_ctrl_ensIDs <- rownames(top_res_Group_het_vs_ctrl)
top_res_Group_het_vs_ctrl_ensIDs<- gsub(pattern = "\\.\\d+$", x=top_res_Group_het_vs_ctrl_ensIDs, replacement = "",perl = T)
top_res_Group_het_vs_ctrl_geneNames <- gene2geneName[gene2geneName$EnsId %in% top_res_Group_het_vs_ctrl_ensIDs,"geneName"]
top_res_Group_het_vs_ctrl_geneNames <- gene2geneName[rownames(top_res_Group_het_vs_ctrl_ensIDs)%in% gene2geneName$EnsId,]
top_res_Group_het_vs_ctrl_geneNames
top_res_Group_het_vs_ctrl
top_res_Group_het_vs_ctrl_ensIDs
top_res_Group_het_vs_ctrl_geneNames <- gene2geneName[gene2geneName$EnsId %in% top_res_Group_het_vs_ctrl_ensIDs,"geneName"]
top_res_Group_het_vs_ctrl_geneNames
# Reorder
top_res_Group_het_vs_ctrl<- top_res_Group_het_vs_ctr[order(top_res_Group_het_vs_ctrl$padj),]
# Reorder
top_res_Group_het_vs_ctrl<- top_res_Group_het_vs_ctrl[order(top_res_Group_het_vs_ctrl$padj),]
top_res_Group_het_vs_ctrl
top_res_Group_het_vs_ctrl_ensIDs <- rownames(top_res_Group_het_vs_ctrl)
top_res_Group_het_vs_ctrl_ensIDs<- gsub(pattern = "\\.\\d+$", x=top_res_Group_het_vs_ctrl_ensIDs, replacement = "",perl = T)
top_res_Group_het_vs_ctrl_geneNames <- gene2geneName[gene2geneName$EnsId %in% top_res_Group_het_vs_ctrl_ensIDs,"geneName"]
# Call differences between homozygous and controls
res_Group_hom_vs_ctrl <- results(DESeq2Table, name="Group_hom_vs_ctrl")
print(top_res_Group_het_vs_ctrl_geneNames)
print(top_res_Group_het_vs_ctrl_ensIDs)
library(DESeq2)
# Read gene to gene_name table
gene2geneName <- read.table("/home/gcarbajosa/annotation/hsapiens/hg37/gtf/gencode.v19.annotation.ens2geneNameTable.txt")
colnames(gene2geneName) <- c("EnsId", "geneName")
# Expression counts
countFile<- "/home/gcarbajosa/Projects/GeneticCompensation/counts_all_raw_GTEx_Blood_WholeBlood.txt"
countData <- as.matrix(read.table(countFile,header=TRUE,sep="\t",row.names=1))
# List of samples you want to use (from count data)
SRRids_in_count<- colnames(countData)
# Phenotype (variants) data
colFile <- "/home/gcarbajosa/Projects/GeneticCompensation/PLA2G2C_rs12139100_SNP_loads.raw"
colData<- read.table("/home/gcarbajosa/Projects/GeneticCompensation/PLA2G2C_rs12139100_SNP_loads.raw", header = T, stringsAsFactors = F, row.names = 2)
# ID conversion
WholeBloodconvert<- read.table("/home/gcarbajosa/Projects/GeneticCompensation/WholeBloodconvert.txt", sep = "\t")
colnames(WholeBloodconvert) <- c("SRRid","FID","Other")
# Keep the ones present in counts only
WholeBloodconvert_IN_counts<- WholeBloodconvert[WholeBloodconvert$SRRid %in%  SRRids_in_count,]
# Assign FIDs as rownames in WholeBloodconvert_IN_counts
rownames(WholeBloodconvert_IN_counts) <- WholeBloodconvert_IN_counts$FID
# Re-order colData using the conversion order
colDataSorted<- colData[row.names(WholeBloodconvert_IN_counts),]
# Assign SSRids as rownames
rownames(colDataSorted) <- WholeBloodconvert_IN_counts$SRRid
# Now this test should work
all(rownames(colDataSorted) == colnames(countData)) #check order
# Rename the column with the variants as Group
colnames(colDataSorted)[6] <- "Group"
colDataSorted[colDataSorted$Group == 0,"Group"] <- "ctrl"
colDataSorted[colDataSorted$Group == 1,"Group"] <- "het"
colDataSorted[colDataSorted$Group == 2,"Group"] <- "hom"
# Remove all the object that are not needed anymore
rm(colFile,countFile,colData,WholeBloodconvert,WholeBloodconvert_IN_counts, SRRids_in_count)
# Load it into DESeq
DESeq2Table <- DESeqDataSetFromMatrix(countData = countData, colData = colDataSorted, design = ~ Group)
DESeq2Table <- DESeq(DESeq2Table)
resultsNames(DESeq2Table)
# Call differences between heterozygous and controls
res_Group_het_vs_ctrl <- results(DESeq2Table, name="Group_het_vs_ctrl")
# Check top differences
#top_res_Group_het_vs_ctrl<- head(res_Group_het_vs_ctrl[order(res_Group_het_vs_ctrl$padj),])
top_res_Group_het_vs_ctrl<- res_Group_het_vs_ctrl[!is.na(res_Group_het_vs_ctrl$padj < 0.05) & res_Group_het_vs_ctrl$padj < 0.05,]
top_res_Group_het_vs_ctrl
# Reorder
top_res_Group_het_vs_ctrl<- top_res_Group_het_vs_ctrl[order(top_res_Group_het_vs_ctrl$padj),]
top_res_Group_het_vs_ctrl
top_res_Group_het_vs_ctrl_ensIDs <- rownames(top_res_Group_het_vs_ctrl)
top_res_Group_het_vs_ctrl_ensIDs
top_res_Group_het_vs_ctrl_ensIDs<- gsub(pattern = "\\.\\d+$", x=top_res_Group_het_vs_ctrl_ensIDs, replacement = "",perl = T)
top_res_Group_het_vs_ctrl_ensIDs
top_res_Group_het_vs_ctrl_geneNames <- gene2geneName[gene2geneName$EnsId %in% top_res_Group_het_vs_ctrl_ensIDs,"geneName"]
print(top_res_Group_het_vs_ctrl_geneNames)
gene2geneName[gene2geneName$EnsId =="ENSG00000237973.1",]
gene2geneName[gene2geneName$EnsId =="ENSG00000237973",]
gene2geneName[gene2geneName$EnsId =="ENSG00000101470",]
sort(top_res_Group_het_vs_ctrl_geneNames)
top_res_Group_het_vs_ctrl_ensIDs
gene2geneName[gene2geneName$EnsId =="ENSG00000101470",]
gene2geneName[gene2geneName$EnsId =="ENSG00000134020",]
#Call differences between homozygous and controls
res_Group_hom_vs_ctrl <- results(DESeq2Table, name="Group_hom_vs_ctrl")
# Check top differences
top_res_Group_hom_vs_ctrl<- head(res_Group_hom_vs_ctrl[order(res_Group_hom_vs_ctrl$padj),])
# Reorder
top_res_Group_hom_vs_ctrl<- top_res_Group_hom_vs_ctrl[order(top_res_Group_hom_vs_ctrl$padj),]
top_res_Group_hom_vs_ctrl_ensIDs <- rownames(top_res_Group_hom_vs_ctrl)
top_res_Group_hom_vs_ctrl_ensIDs<- gsub(pattern = "\\.\\d+$", x=top_res_Group_hom_vs_ctrl_ensIDs, replacement = "",perl = T)
top_res_Group_hom_vs_ctrl_geneNames <- gene2geneName[gene2geneName$EnsId %in% top_res_Group_hom_vs_ctrl_ensIDs,"geneName"]
print(top_res_Group_hom_vs_ctrl_geneNames)
print(sort(top_res_Group_hom_vs_ctrl_geneNames))
print(sort(top_res_Group_het_vs_ctrl_geneNames))
res_Group_het_vs_ctrl_shrink <- lfcShrink(DESeq2Table, coef="Group_het_vs_ctrl", type="apeglm")
# Check top differences
top_res_Group_het_vs_ctrl_shrink<- res_Group_het_vs_ctrl_shrink[!is.na(res_Group_het_vs_ctrl_shrink$padj < 0.05) & res_Group_het_vs_ctrl_shrink$padj < 0.05,]
# Reorder
top_res_Group_het_vs_ctrl_shrink<- top_res_Group_het_vs_ctrl_shrink[order(top_res_Group_het_vs_ctrl_shrink$padj),]
#Get EnsIds fro DE genes and remove trailing numbers for the version
top_res_Group_het_vs_ctrl_shrink_ensIDs <- rownames(top_res_Group_het_vs_ctrl_shrink)
top_res_Group_het_vs_ctrl_shrink_ensIDs<- gsub(pattern = "\\.\\d+$", x=top_res_Group_het_vs_ctrl_shrink_ensIDs, replacement = "",perl = T)
# Extract gene names and print them
top_res_Group_het_vs_ctrl_shrink_geneNames <- gene2geneName[gene2geneName$EnsId %in% top_res_Group_het_vs_ctrl_shrink_ensIDs,"geneName"]
print(top_res_Group_het_vs_ctrl_shrink_geneNames)
print(sort(top_res_Group_het_vs_ctrl_shrink_geneNames))
res_Group_hom_vs_ctrl_shrink <- lfcShrink(DESeq2Table, coef="Group_hom_vs_ctrl", type="apeglm")
# Check top differences
top_res_Group_hom_vs_ctrl_shrink<- res_Group_hom_vs_ctrl_shrink[!is.na(res_Group_hom_vs_ctrl_shrink$padj < 0.05) & res_Group_hom_vs_ctrl_shrink$padj < 0.05,]
# Reorder
top_res_Group_hom_vs_ctrl_shrink<- top_res_Group_hom_vs_ctrl_shrink[order(top_res_Group_hom_vs_ctrl_shrink$padj),]
#Get EnsIds fro DE genes and remove trailing numbers for the version
top_res_Group_hom_vs_ctrl_shrink_ensIDs <- rownames(top_res_Group_hom_vs_ctrl_shrink)
top_res_Group_hom_vs_ctrl_shrink_ensIDs<- gsub(pattern = "\\.\\d+$", x=top_res_Group_hom_vs_ctrl_shrink_ensIDs, replacement = "",perl = T)
# Extract gene names and print them
top_res_Group_hom_vs_ctrl_shrink_geneNames <- gene2geneName[gene2geneName$EnsId %in% top_res_Group_hom_vs_ctrl_shrink_ensIDs,"geneName"]
print(sort(top_res_Group_hom_vs_ctrl_shrink_geneNames))
print(sort(top_res_Group_hom_vs_ctrl_geneNames))
top_res_Group_het_vs_ctrl_geneNames %in% top_res_Group_het_vs_ctrl_shrink
match(top_res_Group_het_vs_ctrl_geneNames , top_res_Group_het_vs_ctrl_shrink)
match(top_res_Group_het_vs_ctrl_geneNames , top_res_Group_het_vs_ctrl_shrink_geneNames)
top_res_Group_het_vs_ctrl_geneNames %in% top_res_Group_het_vs_ctrl_shrink_geneNames
top_res_Group_het_vs_ctrl_geneNames[top_res_Group_het_vs_ctrl_geneNames %in% top_res_Group_het_vs_ctrl_shrink_geneNames]
top_res_Group_het_vs_ctrl_geneNames[top_res_Group_hom_vs_ctrl_geneNames %in% top_res_Group_het_vs_ctrl_shrink_geneNames]
top_res_Group_het_vs_ctrl_geneNames[top_res_Group_hom_vs_ctrl_geneNames %in% top_res_Group_hom_vs_ctrl_shrink_geneNames]
top_res_Group_hom_vs_ctrl_geneNames[top_res_Group_hom_vs_ctrl_geneNames %in% top_res_Group_hom_vs_ctrl_shrink_geneNames]
top_res_Group_hom_vs_ctrl_shrink_geneNames[top_res_Group_hom_vs_ctrl_shrink_geneNames %in% top_res_Group_hom_vs_ctrl_geneNames]
top_res_Group_hom_vs_ctrl_geneNames
top_res_Group_hom_vs_ctrl_shrink_geneNames
top_res_Group_het_vs_ctrl_shrink_geneNames
sort(top_res_Group_hom_vs_ctrl_geneNames)
sort(top_res_Group_hom_vs_ctrl_shrink_geneNames)
sort(top_res_Group_het_vs_ctrl_geneNames)
sort(top_res_Group_het_vs_ctrl_shrink_geneNames)
library(DESeq2)
# Read gene to gene_name table
gene2geneName <- read.table("/home/gcarbajosa/annotation/hsapiens/hg37/gtf/gencode.v19.annotation.ens2geneNameTable.txt")
colnames(gene2geneName) <- c("EnsId", "geneName")
# Expression counts
countFile<- "/home/gcarbajosa/Projects/GeneticCompensation/counts_all_raw_GTEx_Blood_WholeBlood.txt"
countData <- as.matrix(read.table(countFile,header=TRUE,sep="\t",row.names=1))
# Phenotype (variants) data
colFile <- "/home/gcarbajosa/Projects/GeneticCompensation/PLA2G2C_rs12139100_SNP_loads.raw"
colData<- read.table(colFile, header = T, stringsAsFactors = F, row.names = 2)
# ID conversion
WholeBloodconvert<- read.table("/home/gcarbajosa/Projects/GeneticCompensation/WholeBloodconvert.txt", sep = "\t")
colnames(WholeBloodconvert) <- c("SRRid","FID","Other")
# List of samples you want to use (from count data)
SRRids_in_count<- colnames(countData)
# Keep the ones present in counts only
WholeBloodconvert_IN_counts<- WholeBloodconvert[WholeBloodconvert$SRRid %in%  SRRids_in_count,]
# Assign FIDs as rownames in WholeBloodconvert_IN_counts
rownames(WholeBloodconvert_IN_counts) <- WholeBloodconvert_IN_counts$FID
# Re-order colData using the conversion order
colDataSorted<- colData[row.names(WholeBloodconvert_IN_counts),]
# Assign SSRids as rownames
rownames(colDataSorted) <- WholeBloodconvert_IN_counts$SRRid
# Now this test should work
all(rownames(colDataSorted) == colnames(countData)) #check order
# Rename the column with the variants as Group
colnames(colDataSorted)[6] <- "Group"
colDataSorted[colDataSorted$Group == 0,"Group"] <- "ctrl"
colDataSorted[colDataSorted$Group == 1,"Group"] <- "het"
colDataSorted[colDataSorted$Group == 2,"Group"] <- "hom"
# Remove all the object that are not needed anymore
rm(colFile,countFile,colData,WholeBloodconvert,WholeBloodconvert_IN_counts, SRRids_in_count)
# Load it into DESeq
DESeq2Table <- DESeqDataSetFromMatrix(countData = countData, colData = colDataSorted, design = ~ Group)
DESeq2Table <- DESeq(DESeq2Table)
lines(a=1)
lines(h=1)
lines(x=1)
?lines
cars
attach(cars)
plot(dist, speed)
plot(speed, dist)
mtcars
detach(cars)
attach(mtcars)
plot(mpg,disp)
plot(mpg,drat)
plot(mpg,wt)
plot(mpg,disp)
lm(mpg~ disp + drat)
lm(mpg ~ disp + drat)
summary(lm(mpg ~ disp + drat))
cor.test(mpg, disp)
cor.test(mpg, drat)
?mtcars
plot(mpg,disp)
plot(mpg,wt)
plot(mpg,drat)
summary(lm(mpg ~ disp + drat + wt))
summary(lm(mpg ~ disp + drat ))
library(readxl, lib.loc = "/usr/lib64/R/library")
library(readODS)
library(readODS)
library(dplyr)
# Create functions for easier processing
#### FUNS #################
# Get the first three characters from a string
my_substr <- function(x) {
substr(x,1,3)}
# Read vcf file with column headers
my_read_vcf <- function(file) {
tmp_vcf<-readLines(file)
tmp_vcf_data<-read.table(file, stringsAsFactors = FALSE)
# filter for the columns names
tmp_vcf<-tmp_vcf[-(grep("#CHROM",tmp_vcf)+1):-(length(tmp_vcf))]
vcf_names<-unlist(strsplit(tmp_vcf[length(tmp_vcf)],"\t"))
names(tmp_vcf_data)<-vcf_names
colnames(tmp_vcf_data)[1] <- "CHROM"
return(tmp_vcf_data)
rm(tmp_vcf_data)
}
# Read vep txt file with column headers
my_read_vep_txt <- function(file) {
tmp_vcf<-readLines(file)
tmp_vcf_data<-read.table(file, stringsAsFactors = FALSE)
# filter for the columns names
tmp_vcf<-tmp_vcf[-(grep("#Uploaded_variation",tmp_vcf)+1):-(length(tmp_vcf))]
vcf_names<-unlist(strsplit(tmp_vcf[length(tmp_vcf)],"\t"))
names(tmp_vcf_data)<-vcf_names
colnames(tmp_vcf_data)[1] <- "Uploaded_variation"
return(tmp_vcf_data)
rm(tmp_vcf_data)
}
# Get the percentage coverage to filter out heteroplasmis with less than 10%
my_get_coverage <- function(i) {
# Get the filed that contains the coverage
allelesDepth<- unlist(strsplit(unlist(strsplit(x = i, ":"))[3], ","))
allelesDepth <- as.numeric(allelesDepth)
alTalleleDepthPercentage<- allelesDepth[2]/(allelesDepth[1]+allelesDepth[2])
}
# Create functions for easier processing
#### FUNS #################
# Get the first three characters from a string
my_substr <- function(x) {
substr(x,1,3)}
# Read vcf file with column headers
my_read_vcf <- function(file) {
tmp_vcf<-readLines(file)
tmp_vcf_data<-read.table(file, stringsAsFactors = FALSE)
# filter for the columns names
tmp_vcf<-tmp_vcf[-(grep("#CHROM",tmp_vcf)+1):-(length(tmp_vcf))]
vcf_names<-unlist(strsplit(tmp_vcf[length(tmp_vcf)],"\t"))
names(tmp_vcf_data)<-vcf_names
colnames(tmp_vcf_data)[1] <- "CHROM"
return(tmp_vcf_data)
rm(tmp_vcf_data)
}
# Read vep txt file with column headers
my_read_vep_txt <- function(file) {
tmp_vcf<-readLines(file)
tmp_vcf_data<-read.table(file, stringsAsFactors = FALSE)
# filter for the columns names
tmp_vcf<-tmp_vcf[-(grep("#Uploaded_variation",tmp_vcf)+1):-(length(tmp_vcf))]
vcf_names<-unlist(strsplit(tmp_vcf[length(tmp_vcf)],"\t"))
names(tmp_vcf_data)<-vcf_names
colnames(tmp_vcf_data)[1] <- "Uploaded_variation"
return(tmp_vcf_data)
rm(tmp_vcf_data)
}
# Get the percentage coverage to filter out heteroplasmies with less than 10%
my_get_coverage <- function(i) {
# Get the filed that contains the coverage
allelesDepth<- unlist(strsplit(unlist(strsplit(x = i, ":"))[3], ","))
allelesDepth <- as.numeric(allelesDepth)
alTalleleDepthPercentage<- allelesDepth[2]/(allelesDepth[1]+allelesDepth[2])
}
scores <- c(6,7,12,9,4,10,9,8,14,8)
summary(scores)
var(scores)
barplot(scores)
hist(scores)
hist(scores, breaks = 10)
plot(density(scores))
barplot(scores)
sort(scores)
order(scores)
sort(scores)
mean(scores)
median(scores)
setwd("Projects/Circ/annotate_cleavage_sites/")
